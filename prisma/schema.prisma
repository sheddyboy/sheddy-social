// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String     @id @default(cuid())
  name                    String?
  email                   String?    @unique
  password                String?
  emailVerified           DateTime?
  image                   String?
  place                   String?
  coverImage              String?
  bio                     String?
  accounts                Account[]
  sessions                Session[]
  myPosts                 Post[]     @relation("UserPosts")
  savedPosts              Post[]     @relation("UserSavedPosts")
  likedPosts              Post[]     @relation("UserLikedPosts")
  commentedPosts          Comments[]
  followers               User[]     @relation("UserFollows")
  following               User[]     @relation("UserFollows")
  postNotificationOnUsers User[]     @relation("PostNotification")
  postNotificationOnMe    User[]     @relation("PostNotification")
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int        @id @default(autoincrement())
  content   String
  photos    String[]
  userId    String
  author    User       @relation("UserPosts", fields: [userId], references: [id])
  likes     User[]     @relation("UserLikedPosts")
  comments  Comments[]
  savedBy   User[]     @relation("UserSavedPosts")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// model Likes {
//   id     Int    @id @default(autoincrement())
//   postId Int
//   userId String
//   user   User   @relation(fields: [userId], references: [id])
//   post   Post   @relation(fields: [postId], references: [id])
// }

model Comments {
  id        Int      @id @default(autoincrement())
  comment   String
  postId    Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model SavedPosts {
//   id        Int      @id @default(autoincrement())
//   postId    Int
//   userId    String
//   user      User     @relation(fields: [userId], references: [id])
//   post      Post     @relation(fields: [postId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Follows {
//   follower    User   @relation("follower", fields: [followerId], references: [id])
//   followerId  String
//   following   User   @relation("following", fields: [followingId], references: [id])
//   followingId String

//   @@id([followerId, followingId])
// }
